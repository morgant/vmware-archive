#!/usr/bin/env bash

#
# vmware_archive - Create archival copies of VMware Fusion  VMs
#
# CHANGE LOG:
#
# v0.1   - 2019-09-01 - Morgan Aldridge <morgant@makkintosshu.com>
#                       Initial version.
#
# LICENSE:
#
# Copyright (c) 2019 Morgan Aldridge
#
# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# info
host="$(hostname)"
tool="$(basename "$0")"
version="0.1"
copyright="Copyright (c) 2019 Morgan Aldridge"

# environment variables
VMRUN="${VMRUN:="/Applications/VMware Fusion.app/Contents/Library/vmrun"}"

# global variables
verbose=false
source=""
destination=""

# print usage instructions (help)
usage() {
  echo "Usage: $tool [-h|-V] [-v] source destination"
  echo
  echo "Options:"
  echo "  -v  : verbose output"
  echo "  -V  : print the version number and exit"
  echo "  -h  : print these usage instructions and exit"
}

# print version info
version() {
  echo "$tool v${version} $copyright"
}

vm_path_to_vmx() {
  local vm="$1"
  local vmx_path="$(find "$vm" -type f -iname "*.vmx" | head -n 1)"
  echo "$(dirname "$vmx_path")/$(basename "$vmx_path")"
}

vm_is_running() {
  local running=false
  local vm="$(vm_path_to_vmx "$1")"

  while IFS= read -r line; do
    if [ "$line" = "$vm" ]; then running=true; fi
  done <<< "$("$VMRUN" list)"

  $running
}

vm_archive() {
  local vm="$1"
  local dest="$2"
  local running=false

  if $verbose; then echo "Archiving '${vm}'..."; fi

  if vm_is_running "$vm"; then
    running=true
    if $verbose; then echo "VM '${vm}' is running."; fi
  fi

  
}

main() {
  case "$1" in
    "-h")
      usage
      exit
      ;;
    "-v")
      verbose=true
      shift
      ;;
    "-V")
      version
      exit
      ;;
  esac

  source="$1"
  destination="$2"
  if [ -z "$source" ]; then
    echo "ERROR! A source VM or path to VMs must be provided! Exiting."
    exit 1
  fi
  if [ -z "$destination" ]; then
    echo "ERROR! A destination path must be provided! Exiting."
    exit 1
  fi

  if [[ "$source" =~ \.vmwarevm$ ]]; then
    if $verbose; then echo "Archiving single VM '${source}' to '${destination}'..."; fi
    vm_archive "$source" "$destination"
  else
    if $verbose; then echo "Archiving VMs from '${source}' to '${destination}'..."; fi
    while IFS= read -r line; do
      vm_archive "$line" "$destination"
    done <<< "$(find "${source%/}" -type d -iname "*.vmwarevm")"
  fi
}

main "$@"
