#!/usr/bin/env bash

#
# vmware_archive - Create archival copies of VMware Fusion  VMs
#
# CHANGE LOG:
#
# v0.1   - 2019-09-01 - Morgan Aldridge <morgant@makkintosshu.com>
#                       Initial version.
#
# LICENSE:
#
# Copyright (c) 2019 Morgan Aldridge
#
# Permission is hereby granted, free of charge, to any person obtaining a copy 
# of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

# info
host="$(hostname)"
tool="$(basename "$0")"
version="0.1"
copyright="Copyright (c) 2019 Morgan Aldridge"

# environment variables
VMRUN="${VMRUN:="/Applications/VMware Fusion.app/Contents/Library/vmrun"}"

# global variables
verbose=false
dry_run=false
source=""
destination=""

# print usage instructions (help)
usage() {
  echo "Usage: $tool [-h|-V] [-v] source destination"
  echo
  echo "Options:"
  echo "  -v  : verbose output"
  echo "  -V  : print the version number and exit"
  echo "  -h  : print these usage instructions and exit"
  echo "  -n  : don't actually perform any actions (dry run)"
}

# print version info
version() {
  echo "$tool v${version} $copyright"
}

vm_path_to_vmx() {
  local vm="$1"
  local vmx_path="$(find "$vm" -type f -iname "*.vmx" | head -n 1)"
  echo "$(dirname "$vmx_path")/$(basename "$vmx_path")"
}

vm_is_running() {
  local running=false
  local vm="$(vm_path_to_vmx "$1")"

  while IFS= read -r line; do
    if [ "$line" = "$vm" ]; then running=true; fi
  done <<< "$("$VMRUN" list)"

  $running
}

vm_stop() {
  local success=true
  local running=false
  local vm="$(vm_path_to_vmx "$1")"

  if vm_is_running "$1"; then
    if $verbose; then echo -n "Stopping VM '${vm}'... "; fi
    if $dry_run || "$VMRUN" stop "$vm" soft; then
      if $verbose; then echo "Stopped."; fi
    else
      success=false
      echo "ERROR! Unable to stop VM!"
    fi
  fi

  $success
}

vm_start() {
  local success=true
  local running=false
  local vm="$(vm_path_to_vmx "$1")"

  if ! vm_is_running "$1"; then
    if $verbose; then echo -n "Starting VM '${vm}'... "; fi
    if $dry_run || "$VMRUN" start "$vm"; then
      if $verbose; then echo "Started."; fi
    else
      success=false
      echo "ERROR! Unable to start VM!"
    fi
  fi

  $success
}

vm_archive() {
  local success=true
  local vm="$1"
  local dest="$2"
  local running=false

  # ensure source & destinations are correct for rsync
  vm="${vm%/}"
  dest="${dest%/}/"
  if [ ! -d "${vm}" ]; then
    echo "ERROR! VM '${vm}' is not a directory!"
    success=false
  fi
  if [ ! -d "${dest}" ]; then
    echo "ERROR! Destination path '${dest}' is not a directory!"
    success=false
  fi

  if $verbose; then echo "Archiving '${vm}'..."; fi

  # stop the VM if it's running
  if $success && vm_is_running "$vm"; then
    running=true
    if $verbose; then echo "VM '${vm}' is running."; fi

    if ! vm_stop "$vm"; then success=false; fi
  fi

  # ensure source & destinations are correct for rsync
  if [ ! -d "${dest}" ]; then
    echo "ERROR! Destination path is not a directory!"
    success=false
  fi

  # copy the VM to the destination
  if $success; then
    if $verbose; then echo "Copying '${vm}' to '${dest}'... "; fi
    if $dry_run || rsync -va --delete "${vm}" "${dest}"; then
      echo "Copied."
    else
      echo "ERROR! An unknown error occurred copying the VM!"
      success=false
    fi
  fi

  # start the VM if it was running
  if $success && $running; then
    if ! vm_start "$vm"; then success=false; fi
  fi

  $success
}

# see if any arguments were passed in
if [ $# -gt 0 ]; then
  # if so, step through them all and pre-process them (we do this so we can 
  # support multiple options specified together, e.g.: -abc vs. -a -b -c),
  # GNU-style long options with alternate style values, and for easier
  # actual handling
  argv=()
  while [ $# -gt 0 ]; do
    # is this an option (e.g. starts with a dash) or an argument?
    if [ "${1:0:1}" = "-" ]; then
      # is it a GNU-style long option (e.g. starts with a double-dash)?
      if [ "${1:0:2}" = "--" ]; then
        # push the option (everything before an equals) onto argv
        argv=("${argv[@]}" "${1%%=*}")

        # is it the alternate "--long-opt=value" format? if so, make it
        # "--long-opt value" format buy pushing the value (everything after the
        # equals) on as a separate argument
        case "$1" in *=*)
          argv=("${argv[@]}" "${1##*=}") ;;
        esac
      # otherwise, is it multiple single options specified together?
      elif [ ${#1} -gt 2 ]; then
        tmp="$1"
        # push each onto argv as single options
        for (( i=1; i < ${#tmp}; i++ )); do
          argv=("${argv[@]}" "-${tmp:$i:1}")
        done
      # otherwise, it must be a single option so just push it onto argv
      else
        argv=("${argv[@]}" "$1")
      fi
      shift
    # arguments just get pushed onto argv in order too
    else
      argv=("${argv[@]}" "$1")
      shift
    fi
  done
  argc=${#argv[@]}

  # now that we've pre-processed the options, go through them all for real
  for (( i=0; i<$argc; i++ )); do
    # is this an option (e.g. starts with a dash) or an argument?
    if [ "${argv[$i]:0:1}" = "-" ]; then
      case "${argv[$i]}" in
        # see if the user intended us to run in verbose mode
        "-v" | "--verbose")
          verbose=true
          ;;
        # see if the user requested help
        "-h" | "--help")
          usage
          exit
          ;;
        # see if the user requested the version
        "-V" | "--version")
          version
          exit
          ;;
        "-n" | "--dry-run")
          dry_run=true
          ;;
        # handle other options
          
        # unknown option
        *)
          echo "$tool: Unknown option '$1'!"
          exit 1
          ;;
      esac
    # handle arguments
    else
      # one would normally handle arguments here

      # handle source & destination arguments
      if [ "$(( argc - i ))" -eq 2 ]; then
        source="${argv[$i]}"
        (( i++ ))
        destination="${argv[$i]}"
      else
	echo "ERROR! Incorrect number of arguments!"
        usage
        exit 1
      fi
    fi
  done
else
  echo "No options or arguments were specified!"$'\n'
  usage
  exit 1
fi

if [ -z "$source" ]; then
  echo "ERROR! A source VM or path to VMs must be provided! Exiting."
  exit 1
fi
if [ -z "$destination" ]; then
  echo "ERROR! A destination path must be provided! Exiting."
  exit 1
fi

if [[ "$source" =~ \.vmwarevm$ ]]; then
  if $verbose; then echo "Archiving single VM '${source}' to '${destination}'..."; fi
  vm_archive "$source" "$destination"
else
  if $verbose; then echo "Archiving VMs from '${source}' to '${destination}'..."; fi
  while IFS= read -r line; do
    vm_archive "$line" "$destination"
  done <<< "$(find "${source%/}" -type d -iname "*.vmwarevm")"
fi

